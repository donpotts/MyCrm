@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add Customer</MudText>
        </TitleContent>
        <DialogContent>
            <MudNumericField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" />
            <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
            <MudTextField @bind-Value="record.Type" For="@(() => record.Type)" Label="Type" />
            <MudTextField @bind-Value="record.Industry" For="@(() => record.Industry)" Label="Industry" />
            <MudTextField @bind-Value="record.Logo" For="@(() => record.Logo)" Label="Logo" />
            <MudTextField @bind-Value="record.Notes" For="@(() => record.Notes)" Label="Notes" />
            @if (addressArray != null)
            {
            <MudSelect @bind-Value="record.Address.Id" For="@(() => record.Address.Id)" Label="Address" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="long" Value="0" />
                @foreach (var address in addressArray ?? Enumerable.Empty<Address>())
                {
                    <MudSelectItem Value="@address.Id">@address.City</MudSelectItem>
                }
            </MudSelect>
            }
            @if (contactArray != null)
            {
            <MudSelect @bind-Value="record.Contact.Id" For="@(() => record.Contact.Id)" Label="Contact" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="long" Value="0" />
                @foreach (var contact in contactArray ?? Enumerable.Empty<Contact>())
                {
                    <MudSelectItem Value="@contact.Id">@contact.Name</MudSelectItem>
                }
            </MudSelect>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Customer record = new();
    private Address[] addressArray;
    private Contact[] contactArray;
    
    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        PagedResultDto<Address> resAddress = await AppService.ListAddressesAsync("", 0, null);
        addressArray = resAddress.Items.ToArray();
        if (record.Address == null)
        {
            record.AddressId = 0;
            record.Address = new Address();
        }

        PagedResultDto<Contact> resContact = await AppService.ListContactsAsync("", 0, null);
        contactArray = resContact.Items.ToArray();
        if (record.Contact == null)
        {
            record.ContactId = 0;
            record.Contact = new Contact();
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            if (record.Address.Id != null)
                record.AddressId = record.Address.Id;
            if (record.Contact.Id != null)
                record.ContactId = record.Contact.Id;
     
            await AppService.InsertCustomerAsync(record);
            
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
