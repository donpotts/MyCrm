@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update Service</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Update Service</MudText>
            </TitleContent>
            <DialogContent>
                <MudNumericField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" />
                <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
                <MudTextField @bind-Value="record.Description" For="@(() => record.Description)" Label="Description" />
                <MudTextField @bind-Value="record.Recurring" For="@(() => record.Recurring)" Label="Recurring" />
                <MudTextField @bind-Value="record.Icon" For="@(() => record.Icon)" Label="Icon" />
                <MudTextField @bind-Value="record.Notes" For="@(() => record.Notes)" Label="Notes" />

                @if (serviceCategoryArray != null)
                {
                    <MudSelect @bind-Value="record.ServiceCategory.Id" For="@(() => record.ServiceCategory.Id)" Label="ServiceCategory" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem T="long" Value="0" />
                        @foreach (var serviceCategory in serviceCategoryArray ?? Enumerable.Empty<ServiceCategory>())
                        {
                            <MudSelectItem Value="@serviceCategory.Id">@serviceCategory.Name</MudSelectItem>
                        }
                    </MudSelect>
                }



            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public long Id { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Service? record;

    private ServiceCategory[] serviceCategoryArray;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            record = await AppService.GetServiceByIdAsync(Id);



            PagedResultDto<ServiceCategory> resServiceCategory = await AppService.ListServiceCategoriesAsync("Name ASC", 0, null);
            serviceCategoryArray = resServiceCategory.Items.ToArray();
            if (record.ServiceCategory == null)
            {
                record.ServiceCategoryId = 0;
                record.ServiceCategory = new ServiceCategory();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            if (record.ServiceCategory.Id != null)
                record.ServiceCategoryId = record.ServiceCategory.Id;

            await AppService.UpdateServiceAsync(Id, record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
